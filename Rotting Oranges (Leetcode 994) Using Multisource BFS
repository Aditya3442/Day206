class Node {
    int x;
    int y;
    Node(int x , int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    int directions[][] = {{0 , -1} , {-1 , 0} , {0 , 1} , {1 , 0}};
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int ans = 0;
        Queue<Node> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                 if(grid[i][j] == 2 ) {
                    q.offer(new Node(i , j));
                 }
            }
        }

        while(!q.isEmpty()) {
            int size = q.size();
            for(int index = 0; index < size; index++) {
               Node node = q.poll();
               for (int dir[] : directions) {
                  int x = node.x + dir[0];
                  int y = node.y + dir[1];
                  if(x >= 0 && x < grid.length && y >= 0 && y < grid[0].length && grid[x][y] == 1 ) {
                     grid[x][y] = 2;
                     q.offer(new Node(x , y));
                  }
               }
            }
            if(!q.isEmpty())
              ans++;
        }

        for (int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == 1)
                   return -1;
            }
        }
        return ans;

    }
}
